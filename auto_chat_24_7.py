import time
import imaplib
import smtplib
import email
from email.mime.text import MIMEText
from dotenv import load_dotenv
import os
from anonLLM.llm_ollama import OllamaLanguageModel

# Load m√¥i tr∆∞·ªùng
load_dotenv()
EMAIL = os.getenv("EMAIL")
PASSWORD = os.getenv("PASSWORD")
FORWARD_TO = os.getenv("FORWARD_TO")

# Kh·ªüi t·∫°o LLM
llm = OllamaLanguageModel(
    model="mistral:latest",         # ho·∫∑c "mixtral", "llama3", t√πy theo model b·∫°n ƒë√£ t·∫£i v·ªõi ollama
    temperature=0.7,
    anonymize=True           # n·∫øu mu·ªën ·∫©n danh d·ªØ li·ªáu c√° nh√¢n
)

def fetch_unseen_emails():
    mail = imaplib.IMAP4_SSL("imap.gmail.com")
    mail.login(EMAIL, PASSWORD)
    mail.select("inbox")

    status, messages = mail.search(None, '(UNSEEN)')
    email_ids = messages[0].split()

    emails = []
    for eid in email_ids:
        status, data = mail.fetch(eid, "(RFC822)")
        raw_email = data[0][1]
        msg = email.message_from_bytes(raw_email)
        subject = msg["Subject"]
        from_addr = msg["From"]

        # L·∫•y n·ªôi dung text v·ªõi x·ª≠ l√Ω charset
        body = None
        if msg.is_multipart():
            for part in msg.walk():
                if part.get_content_type() == "text/plain":
                    charset = part.get_content_charset() or "utf-8"
                    try:
                        body = part.get_payload(decode=True).decode(charset)
                    except (UnicodeDecodeError, LookupError):
                        # Fallback decode latin1 n·∫øu l·ªói
                        body = part.get_payload(decode=True).decode("latin1", errors="ignore")
                    break
        else:
            charset = msg.get_content_charset() or "utf-8"
            try:
                body = msg.get_payload(decode=True).decode(charset)
            except (UnicodeDecodeError, LookupError):
                body = msg.get_payload(decode=True).decode("latin1", errors="ignore")

        emails.append((eid, from_addr, subject, body))
    mail.logout()
    return emails

def send_email(to_addr, subject, body):
    msg = MIMEText(body)
    msg["Subject"] = subject
    msg["From"] = EMAIL
    msg["To"] = to_addr

    with smtplib.SMTP_SSL("smtp.gmail.com", 465) as server:
        server.login(EMAIL, PASSWORD)
        server.sendmail(EMAIL, to_addr, msg.as_string())

def auto_process():
    emails = fetch_unseen_emails()
    if not emails:
        print("üì≠ Kh√¥ng c√≥ email m·ªõi.")
        return

    for eid, sender, subject, body in emails:
        print(f"\nüì® Email m·ªõi t·ª´ {sender} - Ch·ªß ƒë·ªÅ: {subject}")
        print("üîç ƒêang x·ª≠ l√Ω n·ªôi dung...")

        prompt = f"Tr·∫£ l·ªùi l·ªãch s·ª± v√† ng·∫Øn g·ªçn email sau v√† ·∫©n danh th√¥ng tin c√° nh√¢n:\n\n{body}"
        reply_text = llm.generate(prompt)

        print("‚úÖ N·ªôi dung ph·∫£n h·ªìi ƒë√£ ƒë∆∞·ª£c sinh ra.")
        return
        # G·ª≠i l·∫°i cho ng∆∞·ªùi g·ª≠i
        send_email(sender, f"Re: {subject}", reply_text)
        print(f"‚úâÔ∏è ƒê√£ auto reply cho {sender}")

        # Forward email ƒë√£ ·∫©n danh cho coworker
        forward_text = f"Email t·ª´ {sender} v·ªõi n·ªôi dung ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω:\n\n{reply_text}"
        send_email(FORWARD_TO, f"FWD: {subject}", forward_text)
        print(f"üì§ ƒê√£ forward cho {FORWARD_TO}")

if __name__ == "__main__":
    print("üöÄ D·ªãch v·ª• ki·ªÉm tra email ƒëang ch·∫°y... (Ctrl+C ƒë·ªÉ d·ª´ng)")
    while True:
        try:
            auto_process()
        except Exception as e:
            print(f"‚ùå L·ªói: {e}")
        time.sleep(60)  # Ki·ªÉm tra m·ªói 60 gi√¢y
